generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Produto {
  id              String             @id @default(uuid())
  artigo          String             @unique
  descricao       String?
  largura         Float?
  anexos         S3ProdutoFile[]
  imagem          String?
  criado_por      String?
  alterado_por    String?
  ativo           Boolean            @default(true)
  created_at      DateTime           @default(now()) @db.Timestamptz
  updated_at      DateTime           @updatedAt @db.Timestamptz
  estoque         ProdutoEstoque[]
  pedidos ProdutoPedido[]
  valorMetro      Float?
}

model ProdutoEstoque {
  id              String             @id @default(uuid())
  produto_id      String
  numTear         Int?
  numRolo         Int?
  tipoTear        String?
  metros          Float?
  revisor         String?
  cliente         String?
  criado_por      String?
  alterado_por    String?
  ativo           Boolean            @default(true)
  defeito           Boolean            @default(false)
  created_at      DateTime           @default(now()) @db.Timestamptz
  data            DateTime? @db.Timestamptz
  updated_at      DateTime           @updatedAt @db.Timestamptz
  produto         Produto            @relation(fields: [produto_id], references: [id])
  status          String @default("Em revis√£o")
  qrCode          S3QRCodeFile?
  itemsRomaneio  ItemRomaneio[]
}

model ItemRomaneio {
  id              String             @id @default(uuid())
  metros Float?
  rolo_id String
  rolo ProdutoEstoque @relation(fields: [rolo_id], references: [id])
  produtoPedido_id String
  produtoPedido ProdutoPedido @relation(fields: [produtoPedido_id], references: [id])
}

model ProdutoPedido {
  id              String             @id @default(uuid())
  pedido_id       String
  metros      Float?
  valorTotal Float?
  valorMetro Float?
  produto_id      String
  produto         Produto            @relation(fields: [produto_id], references: [id])
  created_at      DateTime           @default(now()) @db.Timestamptz
  updated_at      DateTime           @updatedAt @db.Timestamptz
  romaneio        ItemRomaneio[]
  cliente         Pedido             @relation(fields: [pedido_id], references: [id])
}

model Pedido {
  id              String             @id @default(uuid())
  nome         String
  endereco         String?
  numero String?
  complemento String?
  bairro String?
  cidade String?
  estado String?
  cep String?
  tel String?
  cnpjCpf String?
  inscEst String?
  condPagamento String?
  valorTotal Float?
  status String @default("Em andamento")
  created_at      DateTime           @default(now()) @db.Timestamptz
  updated_at      DateTime           @updatedAt @db.Timestamptz
  produtosPedido        ProdutoPedido[]
}

model S3ProdutoFile {
  id           String               @id @default(uuid())
  key          String
  url          String?
  bucket       String
  region       String
  tipo         String?
  produto_id   String
  criado_por   String?
  alterado_por String?
  created_at   DateTime             @default(now()) @db.Timestamptz
  updated_at   DateTime             @updatedAt @db.Timestamptz
  produto      Produto @relation(fields: [produto_id], references: [id])
}

model S3QRCodeFile {
  id           String               @id @default(uuid())
  key          String
  url          String?
  bucket       String
  region       String
  tipo         String?
  produtoEstoque_id   String @unique
  criado_por   String?
  alterado_por String?
  created_at   DateTime             @default(now()) @db.Timestamptz
  updated_at   DateTime             @updatedAt @db.Timestamptz
  produtoEstoque      ProdutoEstoque @relation(fields: [produtoEstoque_id], references: [id])
}
