import "../vsl-script-card/vsl-script-card.scss";
import Avatar from "@components/avatar";
import "./vsl-proj-script-card.scss";
import { useTranslation } from "react-i18next";
import { useState } from "react";
import {
  Row,
  Col,
  Tooltip,
  UncontrolledTooltip,
  Button,
  DropdownItem,
  DropdownMenu,
  DropdownToggle,
  UncontrolledDropdown,
  Modal,
  ModalHeader,
  ModalBody
} from "reactstrap";
import { AlertCircle, Edit2, Trash, Edit } from "react-feather";
import { deleteSctCopy } from "@src/views/pages/vsl-client/home/store";
import VslAddScript from "../vsl-add-script";
import {Link} from "react-router-dom"

import {useDispatch, useSelector} from "react-redux";
const VslProjScriptCard = ({ data, containerClassName }) => {
  // ** Hooks
  const { t } = useTranslation();
  // ** Store vars
  const dispatch = useDispatch();
  const store = useSelector((state) => state.dataHome);

  const { nome, foto_capa_url, id, alterado_em } = data;
  const autor = data.gbl_usuario_by_usu_id_criacao
    ? data.gbl_usuario_by_usu_id_criacao.nome
    : "Admin";
   const categoria = "Video de vendas";


  const PlaceHolder = require("@src/assets/images/banner/OutCopy.svg").default;
  const backgroundImg = !foto_capa_url ? PlaceHolder : foto_capa_url;

  const [deleteScript, setDeleteScript] = useState(false); 
  const [duplicateModal, setDuplicateModal] = useState(false);
  const [modal, setModal] = useState(false);

  const [percentage, setPercentage] = useState(0);
  const [slides, setSlides] = useState(0);

   function ConfirmationDelete({ id }) {
    return (
      <div className="on-closed-modal">
        <Modal
          isOpen={deleteScript}
          toggle={() => setDeleteScript(!deleteScript)}
          className="modal-dialog-centered modal-sm"
        >
          <ModalHeader toggle={() => setDeleteScript(!deleteScript)}>
            {t("Delete project?")}
          </ModalHeader>
          <ModalBody>
            {t("Are you sure that you want to delete this?")}

            {t("You won't be able to revert this!")}
            <Col className="text-end mt-1">
              <Button
                color="primary"
                outline
                className="me-1"
                onClick={() => {
                  setDeleteScript(!deleteScript);
                }}
              >
                {t("Cancel")}
              </Button>
              <Button
                color="primary"
                onClick={() => {
                  dispatch(deleteSctCopy(id)).then(() =>
                    toast.success(t("Script deleted successfully"))
                  );
                  setDeleteScript(!deleteScript);
                }}
              >
                {t("Delete")}
              </Button>
            </Col>
          </ModalBody>
        </Modal>
      </div>
    );
  }

  return (
    <div className="card-script-main">
      <VslAddScript modal={modal} setModal={setModal} edit={true} data={data} />
      <VslAddScript modal={duplicateModal} setModal={setDuplicateModal} duplicate={true} data={data} />
      <ConfirmationDelete id={data.id} />
      <div className="card-script-container card-script-alt-container">
        <div className="card-script-content">
          <div>
            <div className="card-script-alt-image mx-2">
              <img src={backgroundImg} alt={nome} width={180} height={39} />
              <img
                src={backgroundImg}
                alt={nome}
                className="img-script-blur"
                width={180}
                height={1}
              />
            </div>
            <Avatar
              initials={autor}
              content={autor}
              imgHeight="128"
              imgWidth="128"
              className="card-avatar card-avatar-alt"
            />
          </div>
   <div className="column-action d-flex align-items-end justify-self-end">
        <UncontrolledDropdown className="icone-script">
          <DropdownToggle tag="span">
            <Edit2 size={17} className="cursor-pointer" />
          </DropdownToggle>
          <DropdownMenu end>
            <DropdownItem
              tag={Link} to={`/script-generator/${data.id}`} 
              className="w-100 text-end"
            >
              <span className="align-middle">{t("Open")}</span>
            </DropdownItem>
            <DropdownItem
              tag={"span"}
              onClick={(e) => {
                e.preventDefault();
                setModal(!modal);
              }}
              className="w-100 text-end"
            >
              <span className="align-middle">{t("Edit")}</span>
            </DropdownItem>
            <DropdownItem
              tag={"span"}
              onClick={(e) => {
                e.preventDefault();
                setDuplicateModal(!duplicateModal);
              }}
              className="w-100 text-end"
            >
              <span className="align-middle">{t("Duplicate")}</span>
            </DropdownItem>
            <DropdownItem
              tag={"span"}
                    onClick={(e) => {
                e.preventDefault();
                setDeleteScript(!deleteScript);

                }}
                className="w-100 text-end"
              >
              <span className="align-middle">{t("Delete")}</span>
            </DropdownItem>
          </DropdownMenu>
        </UncontrolledDropdown>
      </div>
          <div className="card-script-text text-center">
            <div className="paragraph-small-semi-bold mb-8px text-darker">
              {autor}
            </div>
            <div className="paragraph-lead-semi-bold text-offwhite mb-4px">
              {nome}
            </div>
            <div className="paragraph-small text-lighter">{categoria}</div>

            <div className="paragraph-small text-darker mt-1">{t("Laste edited:")} {alterado_em}</div>
          </div>
          <div className="d-flex proj-card-footer p-1">
            <div className="d-flex flex-column text-center">
              <span className="paragraph-small text-lighter">{t("conclusion")}</span>
              <span className="paragraph-lead-semi-bold">{percentage}%</span>
            </div>
            <div className="d-flex flex-column text-center mx-auto">
              <div className="d-flex text-center">
                <span className="paragraph-small text-lighter">{t("time VSL")}</span>
                <UncontrolledTooltip
                  placement="bottom"
                  target="UnControlledExample"
                >
                  {t("Estimated VSL Final time based on average of")} {data.ppm } {t("wpm")}
                </UncontrolledTooltip>
                <AlertCircle
                  color="#8B61FF"
                  size={12}
                  className="my-auto"
                  id="UnControlledExample"
                />
              </div>
              <span className="paragraph-lead-semi-bold">{data.ppm / slides}</span>
            </div>
            <div className="d-flex flex-column text-center">
              <span className="paragraph-small text-lighter">{t("Slides")}</span>
              <span className="paragraph-lead-semi-bold">{slides}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VslProjScriptCard;